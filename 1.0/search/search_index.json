{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":""},{"location":"#installation","title":"Installation","text":"<p>Learn how to install this library in different way.</p> <p>See Installation Guide</p>"},{"location":"converter/","title":"Index","text":""},{"location":"converter/#converter-reference","title":"Converter Reference","text":"<ul> <li>column <code>Console Tool</code> indicates when the PHP linter does not support natively reporting, if the <code>convert</code> command is required</li> <li>column <code>Reporting</code> indicates if the PHP linter support natively to extends reporting feature with a custom class</li> </ul>"},{"location":"converter/#available-since-v100","title":"Available since v1.0.0","text":"Converter User Guide Console Tool Reporting Easy-Coding-Standard official website ecs required \u274c Phan official website phan required \u274c PHP_CodeSniffer official website phpcs optional \u2705 PHP-CS-Fixer official website phpcs-fixer required \u274c PHPLint official website phplint optional \u2705 PHP Mess Detector official website phpmd required \u274c PHPStan official website phpstan optional \u2705 Psalm official website psalm required \u274c Twig-CS-Fixer official website twigcs-fixer optional \u2705"},{"location":"converter/ecs/","title":"Ecs","text":""},{"location":"converter/ecs/#easy-coding-standard-converter","title":"Easy-Coding-Standard Converter","text":"<p>Note</p> <p>Available since version 1.0.0</p>"},{"location":"converter/ecs/#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Requirements</li> <li>Installation</li> <li>Usage</li> <li>Learn more</li> <li>IDE Integration</li> <li>Web SARIF viewer</li> </ol>"},{"location":"converter/ecs/#requirements","title":"Requirements","text":"<ul> <li>Easy-Coding-Standard requires PHP version 7.2.0 or greater,</li> <li>This SARIF converter requires at least Easy-Coding-Standard version 12.3.1</li> </ul>"},{"location":"converter/ecs/#installation","title":"Installation","text":"<pre><code>composer require --dev symplify/easy-coding-standard bartlett/sarif-php-converters\n</code></pre>"},{"location":"converter/ecs/#usage","title":"Usage","text":"<p>Warning</p> <p>As Easy-Coding-Standard is not able to load custom output format on fly without to modify the <code>LazyContainerFactory</code> (see e.g: add junit output formatter), we have no other alternative that using the Console Tool convert command.</p> <p>Step 1: Create a basic ECS config file</p> <p>For example :</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nuse PhpCsFixer\\Fixer\\Import\\NoUnusedImportsFixer;\nuse Symplify\\EasyCodingStandard\\Config\\ECSConfig;\n\nreturn ECSConfig::configure()\n    -&gt;withPaths([\n        __DIR__ . '/examples',\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n    ])\n\n    // Report absolute path on filenames\n    -&gt;withRealPathReporting(true)\n\n    // add a single rule\n    -&gt;withRules([\n        NoUnusedImportsFixer::class,\n    ])\n\n    // add sets - group of rules\n    -&gt;withPreparedSets(\n         arrays: true,\n         namespaces: true,\n         spaces: true,\n         docblocks: true,\n         comments: true,\n    )\n;\n</code></pre> <p>Step 2: Build the native checkstyle output report</p> <pre><code>vendor/bin/ecs check --output-format=checkstyle &gt; examples/ecs/checkstyle.xml\n</code></pre> <p>Warning</p> <p>Be sure to specify absolute path to source code to analyze, otherwise the Console Tool <code>convert</code> command will raise some warnings about file names.</p> <p>Add into your <code>ecs.php</code> config file, at least the following directive (available only since version 12.3.1) :</p> <pre><code>&lt;?php\nreturn ECSConfig::configure()-&gt;withRealPathReporting(true);\n</code></pre> <p>Step 3: And finally, convert it to SARIF with the Console Tool</p> <pre><code>php report-converter convert ecs --input-format=checkstyle --input-file=examples/ecs/checkstyle.xml -v\n</code></pre> <p>Tip</p> <ul> <li>Without verbose option (<code>-v</code>) the Console Tool will print a compact SARIF version.</li> <li><code>--output-file</code> option allows to write a copy of the report to a file. By default, the Console Tool will always print the specified report to the standard output.</li> </ul>"},{"location":"converter/ecs/#learn-more","title":"Learn more","text":"<ul> <li>See demo <code>examples/ecs/</code> directory into this repository.</li> </ul>"},{"location":"converter/ecs/#ide-integration","title":"IDE Integration","text":"<p>The SARIF report file <code>[*].sarif.json</code> is automagically recognized and interpreted by PhpStorm (2024).</p> <p></p>"},{"location":"converter/ecs/#web-sarif-viewer","title":"Web SARIF viewer","text":"<p>With the React based component, you are able to explore a sarif report file previously generated.</p> <p>For example:</p> <p></p>"},{"location":"converter/phan/","title":"Phan","text":""},{"location":"converter/phan/#phan-converter","title":"Phan Converter","text":"<p>Note</p> <p>Available since version 1.0.0</p>"},{"location":"converter/phan/#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Requirements</li> <li>Installation</li> <li>Usage</li> <li>Learn more</li> <li>IDE Integration</li> <li>Web SARIF viewer</li> </ol>"},{"location":"converter/phan/#requirements","title":"Requirements","text":"<ul> <li>Phan requires PHP version 7.2.0 or greater, with <code>filter</code>, <code>json</code> and <code>tokenizer</code> extensions loaded</li> <li>This SARIF converter requires at least Phan version 5.0</li> </ul>"},{"location":"converter/phan/#installation","title":"Installation","text":"<pre><code>composer require --dev phan/phan bartlett/sarif-php-converters\n</code></pre>"},{"location":"converter/phan/#usage","title":"Usage","text":"<p>Warning</p> <p>As Phan v5 is not able to specify custom printer format, we have no other alternative that using the Console Tool convert command.</p> <p>Step 1: Build the checkstyle output report</p> <pre><code>vendor/bin/phpan --directory /absolute/path/to/source/code --absolute-path-issue-messages --output-mode=checkstyle --output=checkstyle.xml\n</code></pre> <p>Warning</p> <p>Be sure to specify <code>--absolute-path-issue-messages</code>, otherwise the Console Tool <code>convert</code> command will raise some warnings about file names.</p> <p>Step 2: And finally, convert it to SARIF with the Console Tool</p> <pre><code>php report-converter convert phan --input-format=checkstyle --input-file=examples/phan/checkstyle.xml -v\n</code></pre> <p>Tip</p> <ul> <li>Without verbose option (<code>-v</code>) the Console Tool will print a compact SARIF version.</li> <li><code>--output-file</code> option allows to write a copy of the report to a file. By default, the Console Tool will always print the specified report to the standard output.</li> </ul>"},{"location":"converter/phan/#learn-more","title":"Learn more","text":"<ul> <li>See demo <code>examples/phan/</code> directory into this repository.</li> </ul>"},{"location":"converter/phan/#ide-integration","title":"IDE Integration","text":"<p>The SARIF report file <code>[*].sarif.json</code> is automagically recognized and interpreted by PhpStorm (2024).</p> <p></p>"},{"location":"converter/phan/#web-sarif-viewer","title":"Web SARIF viewer","text":"<p>With the React based component, you are able to explore a sarif report file previously generated.</p> <p>For example:</p> <p></p>"},{"location":"converter/phpcs-fixer/","title":"Phpcs fixer","text":""},{"location":"converter/phpcs-fixer/#php-cs-fixer-converter","title":"PHP-CS-Fixer Converter","text":"<p>Note</p> <p>Available since version 1.0.0</p>"},{"location":"converter/phpcs-fixer/#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Requirements</li> <li>Installation</li> <li>Usage</li> <li>Learn more</li> <li>IDE Integration</li> <li>Web SARIF viewer</li> </ol>"},{"location":"converter/phpcs-fixer/#requirements","title":"Requirements","text":"<ul> <li>PHP-CS-Fixer requires PHP version 7.4.0 or greater, with <code>filter</code>, <code>json</code> and <code>tokenizer</code> extensions loaded</li> <li>This SARIF converter requires at least PHP-CS-Fixer version 3.5.0</li> </ul>"},{"location":"converter/phpcs-fixer/#installation","title":"Installation","text":"<pre><code>composer require --dev php-cs-fixer/php-cs-fixer bartlett/sarif-php-converters\n</code></pre>"},{"location":"converter/phpcs-fixer/#usage","title":"Usage","text":"<p>Warning</p> <p>As PHP-CS-Fixer is not able to register custom reporter, we have no other alternative that using the Console Tool convert command.</p> <p>Step 1: Build the native checkstyle output report</p> <pre><code>vendor/bin/php-cs-fixer fix --dry-run --format checkstyle /path/to/source/code &gt; checkstyle.xml\n</code></pre> <p>Warning</p> <p>Be sure to specify absolute path to source code to analyze, otherwise the Console Tool <code>convert</code> command will raise some warnings about file names.</p> <p>Step 2: And finally, convert it to SARIF with the Console Tool</p> <pre><code>php report-converter convert phpcs-fixer --input-format=checkstyle --input-file=examples/phpcs-fixer/checkstyle.xml -v\n</code></pre> <p>Tip</p> <ul> <li>Without verbose option (<code>-v</code>) the Console Tool will print a compact SARIF version.</li> <li><code>--output-file</code> option allows to write a copy of the report to a file. By default, the Console Tool will always print the specified report to the standard output.</li> </ul>"},{"location":"converter/phpcs-fixer/#learn-more","title":"Learn more","text":"<ul> <li>See demo <code>examples/php-cs-fixer/</code> directory into this repository.</li> </ul>"},{"location":"converter/phpcs-fixer/#ide-integration","title":"IDE Integration","text":"<p>The SARIF report file <code>[*].sarif.json</code> is automagically recognized and interpreted by PhpStorm (2024).</p> <p></p>"},{"location":"converter/phpcs-fixer/#web-sarif-viewer","title":"Web SARIF viewer","text":"<p>With the React based component, you are able to explore a sarif report file previously generated.</p> <p>For example:</p> <p></p>"},{"location":"converter/phpcs/","title":"Phpcs","text":""},{"location":"converter/phpcs/#php_codesniffer-converter","title":"PHP_CodeSniffer Converter","text":"<p>Note</p> <p>Available since version 1.0.0</p>"},{"location":"converter/phpcs/#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Requirements</li> <li>Installation</li> <li>Usage</li> <li>How to customize your converter</li> <li>Learn more</li> <li>IDE Integration</li> <li>Web SARIF viewer</li> </ol>"},{"location":"converter/phpcs/#requirements","title":"Requirements","text":"<ul> <li>PHP_CodeSniffer requires PHP version 5.4.0 or greater, with <code>tokenizer</code>, <code>xmlwriter</code> and <code>simplexml</code> extensions loaded</li> <li>This SARIF converter requires at least PHP_CodeSniffer version 3.3.0</li> </ul>"},{"location":"converter/phpcs/#installation","title":"Installation","text":"<pre><code>composer require --dev squizlabs/php_codesniffer bartlett/sarif-php-converters\n</code></pre>"},{"location":"converter/phpcs/#usage","title":"Usage","text":"<pre><code>vendor/bin/phpcs --report='\\Bartlett\\Sarif\\Converter\\Reporter\\PhpCsReport' --standard=examples/phpcs/.phpcs.xml.dist --report-file=examples/phpcs/.sarif.json\n</code></pre> <p>Warning</p> <p>If you have the following error</p> <pre><code>ERROR: Class file for report \"\\Bartlett\\Sarif\\Converter\\Reporter\\PhpCsReport\" not found\n</code></pre> <p>That means you've not specified the correct autoloader. Refer to PHP_CodeSniffer config file autoload directive,</p>"},{"location":"converter/phpcs/#how-to-customize-your-converter","title":"How to customize your converter","text":"<p>There are many ways to customize render of your converter.</p>"},{"location":"converter/phpcs/#make-the-sarif-report-output-human-readable","title":"Make the SARIF report output human-readable","text":"<p>By default, all converters use the default <code>\\Bartlett\\Sarif\\Factory\\PhpSerializerFactory</code> to return the SARIF JSON representation of your report.</p> <p>But this serializer factory component, as native PHP <code>json_encode</code> function, does not use whitespace in returned data to format it.</p> <p>To make your report human-readable, you have to specify the <code>\\JSON_PRETTY_PRINT</code> constant, as encoder option.</p> <p>Here is the way to do it !</p> <p>Step 1: Create your report specialized class :</p> <pre><code>namespace MyStandard\\CS;\n\nuse Bartlett\\Sarif\\Converter\\PhpCsConverter;\nuse Bartlett\\Sarif\\Converter\\Reporter\\PhpCsReport;\n\nclass MyPhpCsReport extends PhpCsReport\n{\n    public function __construct()\n    {\n        // enable pretty print flag\n        parent::__construct(new PhpCsConverter(null, true));\n    }\n}\n</code></pre> <p>Step 2: And finally, print the SARIF report</p> <pre><code>vendor/bin/phpcs --report=MyPhpCsReport --standard=examples/phpcs/.phpcs.xml.dist\n</code></pre>"},{"location":"converter/phpcs/#optional-use-the-console-tool-as-alternative","title":"(optional) Use the Console Tool as alternative","text":"<p>If you prefer to convert from a format supported natively by PHPCS, then :</p> <p>Step 1: Build the native checkstyle output report</p> <pre><code>vendor/bin/phpcs --report=checkstyle --report-file=checkstyle.xml /path/to/source/code\n</code></pre> <p>Step 2: And finally, convert it to SARIF with the Console Tool</p> <pre><code>report-converter convert phpcs --input-format=checkstyle --input-file=examples/phpcs/checkstyle.xml -v\n</code></pre> <p>Tip</p> <ul> <li>Without verbose option (<code>-v</code>) the Console Tool will print a compact SARIF version.</li> <li><code>--output-file</code> option allows to write a copy of the report to a file. By default, the Console Tool will always print the specified report to the standard output.</li> </ul>"},{"location":"converter/phpcs/#learn-more","title":"Learn more","text":"<ul> <li>See demo <code>examples/phpcs/</code> directory into this repository.</li> <li>Allow requesting a custom report using the report FQN PHPCS feature is available since v3.3.0</li> </ul>"},{"location":"converter/phpcs/#ide-integration","title":"IDE Integration","text":"<p>The SARIF report file <code>[*].sarif.json</code> is automagically recognized and interpreted by PhpStorm (2024).</p> <p></p>"},{"location":"converter/phpcs/#web-sarif-viewer","title":"Web SARIF viewer","text":"<p>With the React based component, you are able to explore a sarif report file previously generated.</p> <p>For example:</p> <p></p>"},{"location":"converter/phplint/","title":"Phplint","text":""},{"location":"converter/phplint/#phplint-converter","title":"PHPLint Converter","text":"<p>Note</p> <p>Available since version 1.0.0</p>"},{"location":"converter/phplint/#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Requirements</li> <li>Installation</li> <li>Usage</li> <li>How to customize your converter</li> <li>Learn more</li> <li>IDE Integration</li> </ol>"},{"location":"converter/phplint/#requirements","title":"Requirements","text":"<ul> <li>PHPLint requires PHP version 8.1.0 or greater</li> <li>This SARIF converter requires at least PHPLint version 9.4.0</li> </ul>"},{"location":"converter/phplint/#installation","title":"Installation","text":"<pre><code>composer require --dev overtrue/phplint bartlett/sarif-php-converters\n</code></pre>"},{"location":"converter/phplint/#usage","title":"Usage","text":"<pre><code>vendor/bin/phplint --format='\\Overtrue\\PHPLint\\Output\\SarifOutput' /path/to/source/code\n</code></pre> <p>Warning</p> <p>If you have the following error</p> <pre><code>Could not load sarif converter class: \"Bartlett\\Sarif\\Converter\\PhpLintConverter\"\n</code></pre> <p>That means you've not specified the correct autoloader. Please use the <code>--bootstrap</code> run option of PHPLint like that:</p> <p><code>vendor/bin/phplint --format='\\Overtrue\\PHPLint\\Output\\SarifOutput' --bootstrap=vendor/autoload.php</code></p>"},{"location":"converter/phplint/#how-to-customize-your-converter","title":"How to customize your converter","text":"<p>There are many ways to customize render of your converter.</p>"},{"location":"converter/phplint/#make-the-sarif-report-output-human-readable","title":"Make the SARIF report output human-readable","text":"<p>By default, all converters use the default <code>\\Bartlett\\Sarif\\Factory\\PhpSerializerFactory</code> to return the SARIF JSON representation of your report.</p> <p>But this serializer factory component, as native PHP <code>json_encode</code> function, does not use whitespace in returned data to format it.</p> <p>To make your report human-readable, you have to specify the <code>\\JSON_PRETTY_PRINT</code> constant, as encoder option.</p> <p>Here is the way to do it !</p> <p>Tip</p> <ul> <li>Without verbose option (<code>-v</code>) the PHPLint <code>SarifOutput</code> will print a compact SARIF version.</li> </ul> <p>Step 1: Prints the SARIF report</p> <pre><code>vendor/bin/phplint --format='\\Overtrue\\PHPLint\\Output\\SarifOutput' --bootstrap vendor/autoload.php --output=examples/phplint/.sarif.json -v /path/to/source/code\n</code></pre>"},{"location":"converter/phplint/#optional-use-the-console-tool-as-alternative","title":"(optional) Use the Console Tool as alternative","text":"<p>If you prefer to convert from a format supported natively by PHPLint, then :</p> <p>Step 1: Build the native checkstyle output report</p> <pre><code>vendor/bin/phplint --format=checkstyle --output=checkstyle.xml /path/to/source/code\n</code></pre> <p>Step 2: And finally, convert it to SARIF with the Console Tool</p> <pre><code>report-converter convert phplint --input-format=checkstyle --input-file=examples/phplint/checkstyle.xml -v\n</code></pre> <p>Tip</p> <ul> <li>Without verbose option (<code>-v</code>) the Console Tool will print a compact SARIF version.</li> <li><code>--output-file</code> option allows to write a copy of the report to a file. By default, the Console Tool will always print the specified report to the standard output.</li> </ul>"},{"location":"converter/phplint/#learn-more","title":"Learn more","text":"<ul> <li>See demo <code>examples/phplint/</code> directory into this repository.</li> </ul>"},{"location":"converter/phplint/#ide-integration","title":"IDE Integration","text":"<p>The SARIF report file <code>[*].sarif.json</code> is automagically recognized and interpreted by PhpStorm (2024).</p> <p></p>"},{"location":"converter/phpmd/","title":"Phpmd","text":""},{"location":"converter/phpmd/#phpmd-converter","title":"PHPMD Converter","text":"<p>Note</p> <p>Available since version 1.0.0</p>"},{"location":"converter/phpmd/#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Requirements</li> <li>Installation</li> <li>Usage</li> <li>Learn more</li> <li>IDE Integration</li> <li>Web SARIF viewer</li> </ol>"},{"location":"converter/phpmd/#requirements","title":"Requirements","text":"<ul> <li>PHP Mess Detector requires PHP version 5.3.9 or greater, with <code>xml</code> extensions loaded</li> <li>This SARIF converter requires at least PHPMD version 2.0, but version 3.0 is highly recommended.</li> </ul> <p>Version 3.x is still under development, but the <code>Bartlett\\Sarif\\Converter\\Reporter\\PhpMdRenderer</code> class is ready to use new feature (Simplify load of external custom renderer).</p> <p>Until this feature is GA into official PHPMD repository, you can use such <code>composer.json</code> requirements</p> <pre><code>{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/llaville/phpmd\"\n        }\n    ],\n    \"minimum-stability\": \"dev\",\n    \"require-dev\": {\n        \"phpmd/phpmd\": \"dev-feature/3.x-custom-renderer as 3.x-dev\"\n    }\n}\n</code></pre>"},{"location":"converter/phpmd/#installation","title":"Installation","text":"<pre><code>composer require --dev phpmd/phpmd bartlett/sarif-php-converters\n</code></pre>"},{"location":"converter/phpmd/#usage","title":"Usage","text":"<p>Warning</p> <p>As PHMMD v2.15 is not able to specify/boot custom renderer easily, we have no other alternative that using the Console Tool convert command.</p> <p>Step 1: Build the checkstyle output report</p> <pre><code>vendor/bin/phpmd /path/to/source checkstyle ruleset --report-file=checkstyle.xml\n</code></pre> <p>Step 2: And finally, convert it to SARIF with the Console Tool</p> <pre><code>php report-converter convert phpmd --input-format=checkstyle --input-file=examples/phpmd/checkstyle.xml -v\n</code></pre> <p>Tip</p> <ul> <li>Without verbose option (<code>-v</code>) the Console Tool will print a compact SARIF version.</li> <li><code>--output-file</code> option allows to write a copy of the report to a file. By default, the Console Tool will always print the specified report to the standard output.</li> </ul> <p>Alternative usage</p> <p>Note</p> <p>When PHPMD 3.0 will be GA, you can use this alternative</p> <p>Step 1: Build the sarif output report directly via the default <code>Bartlett\\Sarif\\Converter\\Reporter\\PhpMdRenderer</code></p> <pre><code>vendor/bin/phpmd /path/to/source '\\Bartlett\\Sarif\\Converter\\Reporter\\PhpMdRenderer' ruleset --bootstrap vendor/autoload.php --report-file=sarif.json\n</code></pre>"},{"location":"converter/phpmd/#learn-more","title":"Learn more","text":"<ul> <li>See demo <code>examples/phpmd/</code> directory into this repository.</li> </ul>"},{"location":"converter/phpmd/#ide-integration","title":"IDE Integration","text":"<p>The SARIF report file <code>[*].sarif.json</code> is automagically recognized and interpreted by PhpStorm (2024).</p> <p></p>"},{"location":"converter/phpmd/#web-sarif-viewer","title":"Web SARIF viewer","text":"<p>With the React based component, you are able to explore a sarif report file previously generated.</p> <p>For example:</p> <p></p>"},{"location":"converter/phpstan/","title":"Phpstan","text":""},{"location":"converter/phpstan/#phpstan-converter","title":"PHPStan Converter","text":"<p>Note</p> <p>Available since version 1.0.0</p>"},{"location":"converter/phpstan/#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Requirements</li> <li>Installation</li> <li>Usage</li> <li>How to customize your converter</li> <li>Learn more</li> <li>IDE Integration</li> </ol>"},{"location":"converter/phpstan/#requirements","title":"Requirements","text":"<ul> <li>PHPStan requires PHP version 7.2.0 or greater</li> <li>This SARIF converter requires at least PHPStan version 1.9.0</li> </ul>"},{"location":"converter/phpstan/#installation","title":"Installation","text":"<pre><code>composer require --dev phpstan/phpstan bartlett/sarif-php-converters\n</code></pre> <p>Then update your <code>phpstan.neon.dist</code> configuration file:</p> <pre><code>services:\n    errorFormatter.sarif:\n        class: Bartlett\\Sarif\\Converter\\Reporter\\PhpStanFormatter\n</code></pre>"},{"location":"converter/phpstan/#usage","title":"Usage","text":"<pre><code>vendor/bin/phpstan analyse --error-format sarif --configuration phpstan.neon.dist --autoload-file bootstrap.php\n</code></pre>"},{"location":"converter/phpstan/#how-to-customize-your-converter","title":"How to customize your converter","text":"<p>There are many ways to customize render of your converter.</p>"},{"location":"converter/phpstan/#make-the-sarif-report-output-human-readable","title":"Make the SARIF report output human-readable","text":"<p>By default, all converters use the default <code>\\Bartlett\\Sarif\\Factory\\PhpSerializerFactory</code> to return the SARIF JSON representation of your report.</p> <p>But this serializer factory component, as native PHP <code>json_encode</code> function, does not use whitespace in returned data to format it.</p> <p>To make your report human-readable, you have to specify the <code>\\JSON_PRETTY_PRINT</code> constant, as encoder option.</p> <p>Here is the way to do it !</p> <p>Step 1: Create your formatter specialized class :</p> <pre><code>&lt;?php\n\nuse Bartlett\\Sarif\\Converter\\PhpStanConverter;\nuse Bartlett\\Sarif\\Converter\\Reporter\\PhpStanFormatter;\n\nclass MySarifFormatter extends PhpStanFormatter\n{\n    public function __construct(bool $prettyPrint)\n    {\n        parent::__construct(new PhpStanConverter(null , $prettyPrint));\n    }\n}\n</code></pre> <p>Step 2: Create your own class loader to register custom serializer and converter (if any)</p> <pre><code>&lt;?php\nrequire_once dirname(__DIR__, 2) . '/vendor/autoload.php';\nrequire_once __DIR__ . '/MySarifFormatter.php';\n</code></pre> <p>Step 3: Then update your <code>phpstan.neon</code> configuration file:</p> <pre><code>services:\n    errorFormatter.sarif:\n        class: MySarifFormatter\n        arguments:\n            prettyPrint: true\n</code></pre> <p>Step 4: And finally, print the SARIF report</p> <pre><code>vendor/bin/phpstan analyse --error-format sarif --configuration phpstan.neon --autoload-file bootstrap.php\n</code></pre>"},{"location":"converter/phpstan/#learn-more","title":"Learn more","text":"<ul> <li>See demo <code>examples/phpstan/</code> directory into repository.</li> </ul>"},{"location":"converter/phpstan/#ide-integration","title":"IDE Integration","text":"<p>The SARIF report file <code>[*].sarif.json</code> is automagically recognized and interpreted by PhpStorm (2024).</p> <p></p>"},{"location":"converter/psalm/","title":"Psalm","text":""},{"location":"converter/psalm/#psalm-converter","title":"Psalm Converter","text":"<p>Note</p> <p>Available since version 1.0.0</p>"},{"location":"converter/psalm/#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Requirements</li> <li>Installation</li> <li>Usage</li> <li>Learn more</li> <li>IDE Integration</li> <li>Web SARIF viewer</li> </ol>"},{"location":"converter/psalm/#requirements","title":"Requirements","text":"<ul> <li>Psalm requires PHP version 7.4.0 or greater, with <code>json</code>, <code>dom</code>, <code>ctype</code>, <code>mbstring</code>, <code>tokenizer</code>, <code>libxml</code> and <code>simplexml</code> extensions loaded</li> <li>This SARIF converter requires at least Psalm version 5.0</li> </ul> <p>Until introduces absolutePathReporting configuration setting is accepted and included into one official Psalm v5 release, you can use such <code>composer.json</code> requirements :</p> <pre><code>{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/llaville/psalm\"\n        }\n    ],\n    \"minimum-stability\": \"dev\",\n    \"require-dev\": {\n        \"vimeo/psalm\": \"dev-reporting-with-absolute-path as 5.x-dev\"\n    }\n}\n</code></pre>"},{"location":"converter/psalm/#installation","title":"Installation","text":"<pre><code>composer require --dev vimeo/psalm bartlett/sarif-php-converters\n</code></pre>"},{"location":"converter/psalm/#usage","title":"Usage","text":"<p>Warning</p> <p>As Psalm v5 is not able to specify/boot custom renderer easily, we have no other alternative that using the Console Tool convert command.</p> <p>Step 1: Initialize Psalm configuration file <code>psalm.xml</code></p> <pre><code>vendor/bin/psalm path/to/source --init\n</code></pre> <p>Warning</p> <p>Be sure to specify absolute path reporting (<code>absolutePathReporting=\"true\"</code>) into <code>psalm.xml</code> config file, otherwise the Console Tool <code>convert</code> command will raise some warnings about file names.</p> <p>Step 2: Build the checkstyle output report</p> <pre><code>vendor/bin/psalm --report=psalm.checkstyle.xml\n</code></pre> <p>Step 3: And finally, convert it to SARIF normalized with the Console Tool</p> <pre><code>php report-converter convert psalm --input-format=checkstyle --input-file=examples/psalm/psalm.checkstyle.xml -v\n</code></pre> <p>Tip</p> <ul> <li>Without verbose option (<code>-v</code>) the Console Tool will print a compact SARIF version.</li> <li><code>--output-file</code> option allows to write a copy of the report to a file. By default, the Console Tool will always print the specified report to the standard output.</li> </ul>"},{"location":"converter/psalm/#learn-more","title":"Learn more","text":"<ul> <li>See demo <code>examples/psalm/</code> directory into this repository.</li> </ul>"},{"location":"converter/psalm/#ide-integration","title":"IDE Integration","text":"<p>The SARIF report file <code>[*].sarif.json</code> is automagically recognized and interpreted by PhpStorm (2024).</p> <p></p>"},{"location":"converter/psalm/#web-sarif-viewer","title":"Web SARIF viewer","text":"<p>With the React based component, you are able to explore a sarif report file previously generated.</p> <p>For example:</p> <p></p>"},{"location":"converter/twigcs-fixer/","title":"Twigcs fixer","text":""},{"location":"converter/twigcs-fixer/#twig-cs-fixer-converter","title":"Twig-CS-Fixer Converter","text":"<p>Note</p> <p>Available since version 1.0.0</p>"},{"location":"converter/twigcs-fixer/#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Requirements</li> <li>Installation</li> <li>Usage</li> <li>Learn more</li> <li>IDE Integration</li> <li>Web SARIF viewer</li> </ol>"},{"location":"converter/twigcs-fixer/#requirements","title":"Requirements","text":"<ul> <li>Twig-CS-Fixer requires PHP version 8.0 or greater, with <code>ctype</code> and <code>json</code> extensions loaded</li> <li>This SARIF converter requires at least Twig-CS-Fixer version 3.0.0</li> </ul>"},{"location":"converter/twigcs-fixer/#installation","title":"Installation","text":"<pre><code>composer require --dev vincentlanglet/twig-cs-fixer bartlett/sarif-php-converters\n</code></pre>"},{"location":"converter/twigcs-fixer/#usage","title":"Usage","text":"<pre><code>vendor/bin/twigcs-fixer lint /path/to/source --report sarif --config .twig-cs-fixer.dist.php\n</code></pre> <p>Tip</p> <p>The <code>.twig-cs-fixer.dist.php</code> config file should at least identify the default Custom Reporter class <code>TwigCsFixerReporter</code></p> <p><pre><code>$config = new TwigCsFixer\\Config\\Config();\n$config-&gt;addCustomReporter(new Bartlett\\Sarif\\Converter\\Reporter\\TwigCsFixerReporter());\n</code></pre> </p>"},{"location":"converter/twigcs-fixer/#how-to-customize-your-converter","title":"How to customize your converter","text":"<p>There are many ways to customize render of your converter.</p>"},{"location":"converter/twigcs-fixer/#make-the-sarif-report-output-human-readable","title":"Make the SARIF report output human-readable","text":"<p>By default, all converters use the default <code>\\Bartlett\\Sarif\\Factory\\PhpSerializerFactory</code> to return the SARIF JSON representation of your report.</p> <p>But this serializer factory component, as native PHP <code>json_encode</code> function, does not use whitespace in returned data to format it.</p> <p>To make your report human-readable, you have to specify the <code>\\JSON_PRETTY_PRINT</code> constant, as encoder option.</p> <p>Here is the way to do it !</p> <p>Step 1: Create your report specialized class :</p> <pre><code>&lt;?php\n\nuse Bartlett\\Sarif\\Converter\\Reporter\\TwigCsFixerReporter;\nuse Bartlett\\Sarif\\Converter\\TwigCsFixerConverter;\n\nclass MyTwigCsFixerReporter extends TwigCsFixerReporter\n{\n    public function __construct()\n    {\n        // enable pretty print feature\n        parent::__construct(\n            new TwigCsFixerConverter([\n                'format_output' =&gt; true,\n            ])\n        );\n    }\n}\n</code></pre> <p>Step 2: And finally, print the SARIF report</p> <pre><code>vendor/bin/twigcs-fixer lint /path/to/source --report sarif --config .twig-cs-fixer.php\n</code></pre> <p>Tip</p> <p>The <code>MyTwigCsFixerReporter</code> class is identified by the <code>.twig-cs-fixer.php</code> config file.</p>"},{"location":"converter/twigcs-fixer/#optional-use-the-console-tool-as-alternative","title":"(optional) Use the Console Tool as alternative","text":"<p>If you prefer to convert from a [format supported natively][[twigcs-fixer-custom-reporters]] by Twig-CS-Fixer, then :</p> <p>Step 1: Build the checkstyle output report</p> <pre><code>vendor/bin/twigcs-fixer lint /path/to/source --report checkstyle\n</code></pre> <p>Step 2: And finally, convert it to SARIF with the Console Tool</p> <pre><code>php report-converter convert twigcs-fixer --input-format=checkstyle --input-file=examples/twigcs-fixer/checkstyle.xml -v\n</code></pre> <p>Tip</p> <ul> <li>Without verbose option (<code>-v</code>) the Console Tool will print a compact SARIF version.</li> <li><code>--output-file</code> option allows to write a copy of the report to a file. By default, the Console Tool will always print the specified report to the standard output.</li> </ul>"},{"location":"converter/twigcs-fixer/#learn-more","title":"Learn more","text":"<ul> <li>See demo <code>examples/twigcs-fixer/</code> directory into this repository.</li> </ul>"},{"location":"converter/twigcs-fixer/#ide-integration","title":"IDE Integration","text":"<p>The SARIF report file <code>[*].sarif.json</code> is automagically recognized and interpreted by PhpStorm (2024).</p> <p></p>"},{"location":"converter/twigcs-fixer/#web-sarif-viewer","title":"Web SARIF viewer","text":"<p>With the React based component, you are able to explore a sarif report file previously generated.</p> <p>For example:</p> <p></p>"},{"location":"guides/installation/","title":"Installation","text":""},{"location":"guides/installation/#installation-guide","title":"Installation Guide","text":"<ol> <li>Requirements</li> <li>PHAR</li> <li>Phive</li> <li>Composer</li> <li>Git</li> </ol>"},{"location":"guides/installation/#requirements","title":"Requirements","text":"<ul> <li>PHP 7.4 or greater</li> <li>ext-json</li> <li>ext-pcre</li> <li>ext-spl</li> </ul>"},{"location":"guides/installation/#phar","title":"PHAR","text":"<p>The preferred method of installation is to use the PHAR version which can be downloaded from the most recent Github Release. This method ensures you will not have any dependency conflict issue.</p> <p>Tip</p> <p>When you want to use, load autoloader as follows :</p> <pre><code>require_once 'phar://' . '/absolute/path/to' . '/sarif-php-converters.phar/vendor/autoload.php';\n</code></pre>"},{"location":"guides/installation/#phive","title":"Phive","text":"<p>You can install application globally with Phive</p> <pre><code>phive install llaville/sarif-php-converters --force-accept-unsigned\n</code></pre> <p>To upgrade global installation of the application use the following command:</p> <pre><code>phive update llaville/sarif-php-converters --force-accept-unsigned\n</code></pre> <p>You can also install application locally to your project with Phive and configuration file <code>.phive/phars.xml</code></p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;phive xmlns=\"https://phar.io/phive\"&gt;\n    &lt;phar name=\"llaville/sarif-php-converters\" version=\"^1.0\" copy=\"false\" /&gt;\n&lt;/phive&gt;\n</code></pre> <pre><code>phive install --force-accept-unsigned\n</code></pre>"},{"location":"guides/installation/#composer","title":"Composer","text":"<p>The recommended way to install this library is through composer. If you don't know yet what is composer, have a look on introduction.</p> <pre><code>composer require bartlett/sarif-php-converters ^1.0\n</code></pre> <p>If you cannot install it because of a dependency conflict, or you prefer to install it for your project, we recommend you to take a look at bamarni/composer-bin-plugin. Example:</p> <pre><code>composer require --dev bamarni/composer-bin-plugin\ncomposer bin sarif-converters require --dev bartlett/sarif-php-converters\n</code></pre>"},{"location":"guides/installation/#git","title":"Git","text":"<p>The SARIF PHP Converters can be directly used from GitHub by cloning the repository into a directory of your choice.</p> <pre><code>git clone -b 1.0 https://github.com/llaville/sarif-php-converters.git\n</code></pre>"}]}